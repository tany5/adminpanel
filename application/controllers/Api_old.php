<?phpdefined('BASEPATH') OR exit('No direct script access allowed');class Api extends CI_Controller {	public function __construct()	{		parent::__construct();		$this->load->model('api_model');		$this->load->helper('url');		$this->load->helper('text');		$this->load->database();	}	public function getTitle($title_keyword){		header("Access-Control-Allow-Origin: *");		$estore_avision = $this->load->database('estore_avision', TRUE);		 $query = trim($title_keyword);		$like = 'like %'.$title_keyword.'%';		$estore_avision->select('*');		$estore_avision->from('page');		$estore_avision->like('title_keyword',trim($title_keyword),'both');		$query = $estore_avision->get()->result_array();		$result = $estore_avision->last_query();		return $this->output			->set_content_type('application/json')			->set_output(json_encode($query));	}	public function getCourseContent($sub_cat_id){		header("Access-Control-Allow-Origin: *");		$estore_avision = $this->load->database('estore_avision', TRUE);		$estore_avision->select('page_heading,page_content');    	$estore_avision->from('course_content');        $estore_avision->where('sub_cat_id',$sub_cat_id);        $query = $estore_avision->get()->result_array(); 		echo json_encode($query);		        /*foreach($query as $data){            $posts[] = array(                'page_heading' => $data->page_heading,                'page_content' => $data->page_content            );        }		if(!empty($posts)){			return $this->output				->set_content_type('application/json')				->set_output($posts);		}else{			$msg ="No Data Avaulable";			return $this->output				->set_content_type('application/json')				->set_output($posts);		}*/       	}	public function getCourseName($sub_cat_id){		header("Access-Control-Allow-Origin: *");        $estore_avision = $this->load->database('estore_avision', TRUE);		$estore_avision->select('sub_category_name');        $estore_avision->from('sub_category');        $estore_avision->where('sub_category_id ',$sub_cat_id);        $estore_avision->limit(1, 0);       		$query = $estore_avision->get()->result_array();        return $this->output			->set_content_type('application/json')			->set_output(json_encode($query));	}		public function video_courseById($sub_cat_id){		header("Access-Control-Allow-Origin: *");			$result = $this->api_model->video_courseById($sub_cat_id);		$video_course= array();		foreach($result as $row){						$video_course[] = array(				"product_id" => $row['product_id'],				"product_name" => $row['product_name'],				"product_img" => 'http://estore.avision24x7.com/'.$row['product_img']							);		}		echo json_encode($video_course);			}		public function testSeriesById($sub_cat_id){		header("Access-Control-Allow-Origin: *");			$result = $this->api_model->testSeriesById($sub_cat_id);		/*if(!empty($result))           {                    $data['message']="Test Series Fetch Sucessfully";                $data['status_code']= '200';				$data['TestSeries'] = $result;           }           else {                $data['message']="get student Details Not Found";                $data['status_code']= '203';            }            echo json_encode($data);*/		$testSeries = array();			foreach($result as $row){						$testSeries[] = array(							"product_id" => $row['product_id'],				"product_name" => $row['product_name'],				"sub_category_image" => 'http://estore.avision24x7.com/'.$row['sub_category_image']			);		}			echo json_encode($testSeries);	}	public function subCategoryAllData()	{	  header("Access-Control-Allow-Origin: *");			$estore_avision = $this->load->database('estore_avision', TRUE);	  $course=$estore_avision->query("select * from courses")->result_array();	  $arrayDetails = array();	  foreach($course as $courseDetail)	  {	  	$arrayDetails[]=array(       	"course_name"=>$courseDetail['courses_name'],       	"subCatDetails"=>$estore_avision->query("SELECT * FROM `courses` INNER JOIN sub_courses on courses.courses_id=sub_courses.courses_id INNER JOIN sub_category on sub_category.sub_courses_id=sub_courses.sub_courses_id where courses.courses_id =".$courseDetail['courses_id'])->result_array()       );	  }	  return $this->output			->set_content_type('application/json')			->set_output(json_encode($arrayDetails));	} 	public function TestSeriescourseDetails()	{		header("Access-Control-Allow-Origin: *");		$table="courses";		$coursesData = $this->api_model->get_datas($table);		$details = array();		if(!empty($coursesData)){			foreach($coursesData as $coursesDetails){				$details[] = array(					'courses_id' => $coursesDetails->courses_id,					'courses_name' => $coursesDetails->courses_name,					'courses_desc' => $coursesDetails->courses_desc,					'courses_icon' => $coursesDetails->courses_icon,					'course_changed_icon' => $coursesDetails->course_changed_icon				);			}		}		return $this->output			->set_content_type('application/json')			->set_output(json_encode($details));	}	public function passData()	{		header("Access-Control-Allow-Origin: *");		$table="estore_plan";		$passData=$this->api_model->get_datas($table);		$details = array();		if(!empty($passData)){			foreach($passData as $passDetails){				$details[] = array(					'plan_name' => strip_tags($passDetails->plan_name),					'offer_price' => strip_tags($passDetails->offer_price)				);								}		}		return $this->output			->set_content_type('application/json')			->set_output(json_encode($details));	}	public function testSeriesSingleData($courseId)	{		header("Access-Control-Allow-Origin: *");		$testSeriesData = $this->api_model->getTestSeriesByCategories($courseId);		/*echo "<pre>";		print_r($testSeriesData);		die();*/		return $this->output			->set_content_type('application/json')			->set_output(json_encode($testSeriesData));	}	public function examPreprationDetails()	{		header("Access-Control-Allow-Origin: *");		$avision_group = $this->load->database('avision_group',TRUE);		$examPreprationData=$avision_group->query("select * from wp_postmeta where post_id='141' and (meta_key='home_page_title' or meta_key='home_page_content')")->result();		$details = array();		if(!empty($examPreprationData)){			foreach($examPreprationData as $examPreprationDetails){				$details[] = array(					'meta_id' => strip_tags($examPreprationDetails->meta_id),					'post_id' => strip_tags($examPreprationDetails->post_id),					'meta_key' => strip_tags($examPreprationDetails->meta_key),					'meta_value' => strip_tags($examPreprationDetails->meta_value)				);								}		}				return $this->output			->set_content_type('application/json')			->set_output(json_encode($details));	}	public function featuredDetails()	{		header("Access-Control-Allow-Origin: *");		$avision_group = $this->load->database('avision_group',TRUE);		$featuredData=$avision_group->query("select * from wp_postmeta where post_id='141' and (meta_key='home_page_block_1' or meta_key='home_page_block_2' or meta_key='home_page_block_3' or meta_key='home_page_block_4')")->result();		        $details = array();		if(!empty($featuredData)){			foreach($featuredData as $featuredDetails){				$details[] = array(					'meta_id' => strip_tags($featuredDetails->meta_id),					'post_id' => strip_tags($featuredDetails->post_id),					'meta_key' => strip_tags($featuredDetails->meta_key),					'meta_value' => strip_tags($featuredDetails->meta_value)				);								}		}		return $this->output			->set_content_type('application/json')			->set_output(json_encode($details));	}	public function testSeriesData()	{		header("Access-Control-Allow-Origin: *");		$testSeriesData = $this->api_model->get_TestSeriesdatas();		return $this->output			->set_content_type('application/json')			->set_output(json_encode($testSeriesData));	}	public function bannerDetails()	{		header("Access-Control-Allow-Origin: *");		$table="angular_banner";		$bannerData = $this->api_model->get_datas($table);		$details = array();		if(!empty($bannerData)){			foreach($bannerData as $bannersDetails){				$details[] = array(					'banner_id' => $bannersDetails->banner_id,					'main_heading' => $bannersDetails->main_heading,					'sub_heading' => $bannersDetails->sub_heading,					'banner_sub_sub_heading' => $bannersDetails->banner_sub_sub_heading,					'button_text' => $bannersDetails->button_text,					'banner_image' => $bannersDetails->banner_image,					'banner_background_image' => $bannersDetails->banner_background_image				);			}		}		return $this->output			->set_content_type('application/json')			->set_output(json_encode($details));	}	public function testimonialDetails()	{		header("Access-Control-Allow-Origin: *");		$table="testimonial";		$testimonialData = $this->api_model->get_datas($table);		$details = array();		if(!empty($testimonialData)){			foreach($testimonialData as $testimonialDetails){				$details[] = array(					'id' => $testimonialDetails->id,					'content' => strip_tags($testimonialDetails->content),					'image' => $testimonialDetails->image,					'rating' => $testimonialDetails->rating,					'user_name' => $testimonialDetails->user_name									);			}		}		return $this->output			->set_content_type('application/json')			->set_output(json_encode($details));	}	public function courseDetails()	{		header("Access-Control-Allow-Origin: *");		$table="courses";		$coursesData = $this->api_model->get_datas($table);		$details = array();		if(!empty($coursesData)){			foreach($coursesData as $coursesDetails){				$details[] = array(					'courses_id' => $coursesDetails->courses_id,					'courses_name' => $coursesDetails->courses_name,					'courses_desc' => $coursesDetails->courses_desc,					'courses_icon' => $coursesDetails->courses_icon,					'course_changed_icon' => $coursesDetails->course_changed_icon				);			}		}       		return $this->output			->set_content_type('application/json')			->set_output(json_encode($details));				}	public function passValue(){		$coursesData = $this->api_model->get_passVal();	}  	public function subCategoryName($courseId)	{		/* Please Be CareFull Changing on this function is working in home page as well as pass page */		header("Access-Control-Allow-Origin: *");		$coursesData = $this->api_model->get_data($courseId);		if(!empty($coursesData)){			foreach($coursesData as $coursesDetails){				$details[] = array(					'courses_id' => $coursesDetails->courses_id,					'courses_name' => $coursesDetails->courses_name,					'courses_desc' => $coursesDetails->courses_desc,					'courses_icon' => $coursesDetails->courses_icon,					'course_changed_icon' => $coursesDetails->course_changed_icon,					'created_date' => $coursesDetails->created_date,					'modified_date' => $coursesDetails->modified_date,					'sub_courses_id' => $coursesDetails->sub_courses_id,					'sub_courses_name' => $coursesDetails->sub_courses_name,					'sub_courses_desc' => $coursesDetails->sub_courses_desc,					'sub_category_id' => $coursesDetails->sub_category_id,					'sub_category_name' => $coursesDetails->sub_category_name,					'sub_category_desc' => $coursesDetails->sub_category_desc,					'correct_marks' => $coursesDetails->correct_marks,					'negetive_marks' => $coursesDetails->negetive_marks,					'sub_category_image' => $coursesDetails->sub_category_image,					'trending_order' => $coursesDetails->trending_order,				);			}		}		return $this->output			->set_content_type('application/json')			->set_output(json_encode($details));	}	public function resultTab(){		header("Access-Control-Allow-Origin: *");		$avision_group = $this->load->database('avision_group',TRUE);		$result_data = $avision_group->query("SELECT `term`.`term_id`, `term`.`name` FROM `wp_term_taxonomy` as `wpt` INNER JOIN `wp_terms` AS `term` ON `term`.`term_id` = `wpt`.`term_id` WHERE `wpt`.`taxonomy` = 'all-result'")->result_array();		return $this->output			->set_content_type('application/json')			->set_output(json_encode($result_data));	}	public function getStudentImage($term_id)	{		header("Access-Control-Allow-Origin: *");		//$details=[];		$avision_group = $this->load->database('avision_group',TRUE);		$result_data = $avision_group->query("SELECT `wp`.`ID`, `wp`.`post_title` FROM `wp_posts` AS `wp` INNER JOIN `wp_term_relationships` AS `wpterm` ON `wp`.`ID` = `wpterm`.`object_id` WHERE `wp`.`post_type` = 'resultdp' AND `wpterm`.`term_taxonomy_id` = '$term_id'  order by `wp`.`ID` DESC")->result_array();		if(!empty($result_data)){		foreach($result_data as $data)		{		  $details=$avision_group->query("SELECT `ID`,`post_title`,`guid` FROM `wp_posts` WHERE `post_parent` = ".$data['ID']." AND `post_type` = 'attachment' order by `ID`  limit 0,1")->result_array();		  $designation=$avision_group->query("SELECT `post_id`,`meta_key`,`meta_value` FROM `wp_postmeta` WHERE `post_id` = ".$data['ID']." AND `meta_key` = 'course' ")->row_array();		  if(!empty($details)){		  foreach($details as $result){		  	 $result_arr[] = array(		  		'ID' => $result['ID'],		  		'post_title' => $data['post_title'],		  		'guid' => $result['guid'],		  		'meta_value' => $designation['meta_value']		  	);		  }		 }		}	}		/*echo "<pre>";		print_r($result_arr);		die();*/       		return $this->output			->set_content_type('application/json')			->set_output(json_encode($result_arr));	}	public function getSingleStudentImage($term_id)	{		header("Access-Control-Allow-Origin: *");		//$details=[];		$avision_group = $this->load->database('avision_group',TRUE);		$result_data = $avision_group->query("SELECT `wp`.`ID`, `wp`.`post_title` FROM `wp_posts` AS `wp` INNER JOIN `wp_term_relationships` AS `wpterm` ON `wp`.`ID` = `wpterm`.`object_id` WHERE `wp`.`post_type` = 'resultdp' AND `wpterm`.`term_taxonomy_id` = '$term_id' order by `wp`.`ID` DESC")->result_array();				foreach($result_data as $data)		{		  $details=$avision_group->query("SELECT `ID`,`post_title`,`guid` FROM `wp_posts` WHERE `post_parent` = ".$data['ID']." AND `post_type` = 'attachment' order by `ID` desc limit 0,1")->row_array();		  $designation=$avision_group->query("SELECT `post_id`,`meta_key`,`meta_value` FROM `wp_postmeta` WHERE `post_id` = ".$data['ID']." AND `meta_key` = 'course' ")->row_array();		  		 $result_arr[] = array(		  		'ID' => $details['ID'],		  		'post_title' => $details['post_title'],		  		'guid' => $details['guid'],		  		'meta_value' => $designation['meta_value']		  	);		  		}				return $this->output			->set_content_type('application/json')			->set_output(json_encode($result_arr));	}	public function featured_blogs()	{		header("Access-Control-Allow-Origin: *");		$blogs = $this->api_model->get_blogs($featured=true, $recentpost=false);		$posts = array();		if(!empty($blogs)){			foreach($blogs as $blog){								$short_desc = strip_tags(character_limiter($blog->description, 70));				$author = $blog->first_name.' '.$blog->last_name;				$posts[] = array(					'id' => $blog->id,					'title' => $blog->title,					'short_desc' => html_entity_decode($short_desc),					'author' => $author,					'image' => base_url('media/images/'.$blog->image),					'created_at' => $blog->created_at				);			}		}		return $this->output			->set_content_type('application/json')			->set_output(json_encode($posts));	}	public function blog($id)	{		header("Access-Control-Allow-Origin: *");				$blog = $this->api_model->get_blog($id);		$author = $blog->first_name.' '.$blog->last_name;		$post = array(			'id' => $blog->id,			'title' => $blog->title,			'description' => $blog->description,			'author' => $author,			'image' => base_url('media/images/'.$blog->image),			'created_at' => $blog->created_at		);				$this->output			->set_content_type('application/json')			->set_output(json_encode($post));	}	public function recent_blogs()	{		header("Access-Control-Allow-Origin: *");		$blogs = $this->api_model->get_blogs($featured=false, $recentpost=5);		$posts = array();		if(!empty($blogs)){			foreach($blogs as $blog){								$short_desc = strip_tags(character_limiter($blog->description, 70));				$author = $blog->first_name.' '.$blog->last_name;				$posts[] = array(					'id' => $blog->id,					'title' => $blog->title,					'short_desc' => html_entity_decode($short_desc),					'author' => $author,					'image' => base_url('media/images/'.$blog->image),					'created_at' => $blog->created_at				);			}		}		$this->output			->set_content_type('application/json')			->set_output(json_encode($posts));	}	public function categories()	{		header("Access-Control-Allow-Origin: *");		$categories = $this->api_model->get_categories();		$category = array();		if(!empty($categories)){			foreach($categories as $cate){				$category[] = array(					'id' => $cate->id,					'name' => $cate->category_name				);			}		}		$this->output			->set_content_type('application/json')			->set_output(json_encode($category));	}	public function page($slug)	{		header("Access-Control-Allow-Origin: *");				$page = $this->api_model->get_page($slug);		$pagedata = array(			'id' => $page->id,			'title' => $page->title,			'description' => $page->description		);				$this->output			->set_content_type('application/json')			->set_output(json_encode($pagedata));	}	public function contact()	{		header("Access-Control-Allow-Origin: *");		header("Access-Control-Request-Headers: GET,POST,OPTIONS,DELETE,PUT");		header('Access-Control-Allow-Headers: Accept,Accept-Language,Content-Language,Content-Type');		$formdata = json_decode(file_get_contents('php://input'), true);		if( ! empty($formdata)) {			$name = $formdata['name'];			$email = $formdata['email'];			$phone = $formdata['phone'];			$message = $formdata['message'];			$contactData = array(				'name' => $name,				'email' => $email,				'phone' => $phone,				'message' => $message,				'created_at' => date('Y-m-d H:i:s', time())			);						$id = $this->api_model->insert_contact($contactData);			$this->sendemail($contactData);						$response = array('id' => $id);		}		else {			$response = array('id' => '');		}				$this->output			->set_content_type('application/json')			->set_output(json_encode($response));	}	public function sendemail($contactData)	{		$message = '<p>Hi, <br />Some one has submitted contact form.</p>';		$message .= '<p><strong>Name: </strong>'.$contactData['name'].'</p>';		$message .= '<p><strong>Email: </strong>'.$contactData['email'].'</p>';		$message .= '<p><strong>Phone: </strong>'.$contactData['phone'].'</p>';		$message .= '<p><strong>Name: </strong>'.$contactData['message'].'</p>';		$message .= '<br />Thanks';		$this->load->library('email');		$config['protocol'] = 'sendmail';		$config['mailpath'] = '/usr/sbin/sendmail';		$config['charset'] = 'iso-8859-1';		$config['wordwrap'] = TRUE;		$config['mailtype'] = 'html';		$this->email->initialize($config);		$this->email->from('demo@rsgitech.com', 'RSGiTECH');		$this->email->to('demo2@rsgitech.com');		$this->email->cc('another@rsgitech.com');		$this->email->bcc('them@rsgitech.com');		$this->email->subject('Contact Form');		$this->email->message($message);		$this->email->send();	}	public function login() 	{		header("Access-Control-Allow-Origin: *");		header("Access-Control-Request-Headers: GET,POST,OPTIONS,DELETE,PUT");		header('Access-Control-Allow-Headers: Accept,Accept-Language,Content-Language,Content-Type');		$formdata = json_decode(file_get_contents('php://input'), true);		$username = $formdata['username'];		$password = $formdata['password'];		$user = $this->api_model->login($username, $password);		if($user) {			$response = array(				'user_id' => $user->id,				'first_name' => $user->first_name,				'last_name' => $user->last_name,				'token' => $user->token			);		}		else {			$response = array();		}		$this->output				->set_content_type('application/json')				->set_output(json_encode($response));	}	public function adminBlogs()	{		header("Access-Control-Allow-Origin: *");		header("Access-Control-Allow-Headers: authorization, Content-Type");		$token = $this->input->get_request_header('Authorization');		$isValidToken = $this->api_model->checkToken($token);		$posts = array();		if($isValidToken) {			$blogs = $this->api_model->get_admin_blogs();			foreach($blogs as $blog) {				$posts[] = array(					'id' => $blog->id,					'title' => $blog->title,					'image' => base_url('media/images/'.$blog->image),					'created_at' => $blog->created_at				);			}			$this->output				->set_status_header(200)				->set_content_type('application/json')				->set_output(json_encode($posts)); 		}	}	public function adminBlog($id)	{		header("Access-Control-Allow-Origin: *");		header("Access-Control-Allow-Headers: authorization, Content-Type");		$token = $this->input->get_request_header('Authorization');		$isValidToken = $this->api_model->checkToken($token);		if($isValidToken) {			$blog = $this->api_model->get_admin_blog($id);			$post = array(				'id' => $blog->id,				'title' => $blog->title,				'description' => $blog->description,				'image' => base_url('media/images/'.$blog->image),				'is_featured' => $blog->is_featured,				'is_active' => $blog->is_active			);						$this->output				->set_status_header(200)				->set_content_type('application/json')				->set_output(json_encode($post)); 		}	}	public function createBlog()	{		header("Access-Control-Allow-Origin: *");		header("Access-Control-Request-Headers: GET,POST,OPTIONS,DELETE,PUT");		header("Access-Control-Allow-Headers: authorization, Content-Type");		$token = $this->input->get_request_header('Authorization');		$isValidToken = $this->api_model->checkToken($token);		if($isValidToken) {			$title = $this->input->post('title');			$description = $this->input->post('description');			$is_featured = $this->input->post('is_featured');			$is_active = $this->input->post('is_active');			$filename = NULL;			$isUploadError = FALSE;			if ($_FILES && $_FILES['image']['name']) {				$config['upload_path']          = './media/images/';	            $config['allowed_types']        = 'gif|jpg|png|jpeg';	            $config['max_size']             = 500;	            $this->load->library('upload', $config);	            if ( ! $this->upload->do_upload('image')) {	            	$isUploadError = TRUE;					$response = array(						'status' => 'error',						'message' => $this->upload->display_errors()					);	            }	            else {	            	$uploadData = $this->upload->data();            		$filename = $uploadData['file_name'];	            }			}			if( ! $isUploadError) {	        	$blogData = array(					'title' => $title,					'user_id' => 1,					'description' => $description,					'image' => $filename,					'is_featured' => $is_featured,					'is_active' => $is_active,					'created_at' => date('Y-m-d H:i:s', time())				);				$id = $this->api_model->insertBlog($blogData);				$response = array(					'status' => 'success'				);			}			$this->output				->set_status_header(200)				->set_content_type('application/json')				->set_output(json_encode($response)); 		}	}	public function updateBlog($id)	{		header("Access-Control-Allow-Origin: *");		header("Access-Control-Allow-Headers: authorization, Content-Type");		header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		$token = $this->input->get_request_header('Authorization');		$isValidToken = $this->api_model->checkToken($token);		if($isValidToken) {			$blog = $this->api_model->get_admin_blog($id);			$filename = $blog->image;			$title = $this->input->post('title');			$description = $this->input->post('description');			$is_featured = $this->input->post('is_featured');			$is_active = $this->input->post('is_active');			$isUploadError = FALSE;			if ($_FILES && $_FILES['image']['name']) {				$config['upload_path']          = './media/images/';	            $config['allowed_types']        = 'gif|jpg|png|jpeg';	            $config['max_size']             = 500;	            $this->load->library('upload', $config);	            if ( ! $this->upload->do_upload('image')) {	            	$isUploadError = TRUE;					$response = array(						'status' => 'error',						'message' => $this->upload->display_errors()					);	            }	            else {	   					if($blog->image && file_exists(FCPATH.'media/images/'.$blog->image))					{						unlink(FCPATH.'media/images/'.$blog->image);					}	            	$uploadData = $this->upload->data();            		$filename = $uploadData['file_name'];	            }			}			if( ! $isUploadError) {	        	$blogData = array(					'title' => $title,					'user_id' => 1,					'description' => $description,					'image' => $filename,					'is_featured' => $is_featured,					'is_active' => $is_active				);				$this->api_model->updateBlog($id, $blogData);				$response = array(					'status' => 'success'				);           	}			$this->output				->set_status_header(200)				->set_content_type('application/json')				->set_output(json_encode($response)); 		}	}	public function deleteBlog($id)	{		header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");		$token = $this->input->get_request_header('Authorization');		$isValidToken = $this->api_model->checkToken($token);		if($isValidToken) {			$blog = $this->api_model->get_admin_blog($id);			if($blog->image && file_exists(FCPATH.'media/images/'.$blog->image))			{				unlink(FCPATH.'media/images/'.$blog->image);			}			$this->api_model->deleteBlog($id);			$response = array(				'status' => 'success'			);			$this->output				->set_status_header(200)				->set_content_type('application/json')				->set_output(json_encode($response)); 		}	}		public function data_bank_po(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_menu_data(1);		echo json_encode($result);			}		public function data_bank_so(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_menu_data(2);		echo json_encode($result);			}		public function data_bank_clerk(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_menu_data(3);		echo json_encode($result);	}		public function data_bank_rrb(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_menu_data(4);		echo json_encode($result);	}	public function data_ssc(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_menu_data(5);		echo json_encode($result);	}	public function data_railways(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_menu_data(6);		echo json_encode($result);	}	public function data_insurance(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_menu_data(7);		echo json_encode($result);	}	public function data_tet(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_menu_data(8);		echo json_encode($result);	}	public function data_bank_defence(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_menu_data(9);		echo json_encode($result);	}	public function data_wb(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_menu_data(10);		echo json_encode($result);	}	public function data_fci(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_menu_data(11);		echo json_encode($result);	}		public function data_footer_menu(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->data_footer_menu();		echo json_encode($result);	}		public function get_faculties(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$faculties[0] = array(						'Id'	=> 0,				'Name' => 'Jeetu Tiwari',			'qualification' => 'B.Sc',			'post'	=> 'General Study Faculty',			'Experience' => '4+'		);		$faculties[1] = array(			'Id'	=> 1,			'Name' => 'Sanjiv Kumar Dubey',			'qualification' => 'MSc  zoology.',			'post'	=> 'General Study Faculty',			'Experience' => '3+'		);		$faculties[2] = array(			'Id'	=> 2,			'Name' => 'Urvashi singhi ',			'qualification' => 'Mcom (BADM) , B.ed',			'post'	=> 'General Awareness Faculty',			'Experience' => '3+'		);		$faculties[3] = array(			'Id'	=> 3,			'Name' => 'Amal Kumar',			'qualification' => 'Msc in Mathematics',			'post'	=> 'Quantitative Aptitude Faculty',			'Experience' => '7+'		);		$faculties[4] = array(			'Id'	=> 4,			'Name' => 'Arindam Dutta',			'qualification' => 'Msc Computer Science',			'post'	=> 'Reasoning Faculty',			'Experience' => '5'		);		$faculties[5] = array(			'Id'	=> 5,			'Name' => 'Arka Roy',			'qualification' => 'B.Tech',			'post'	=> 'Quantitative Aptitude Faculty',			'Experience' => '3+'		);		$faculties[6] = array(			'Id'	=> 6,			'Name' => 'Surayakant Ram',			'qualification' => 'M.A in Political Science,B.Ed',			'post'	=> 'General Study Faculty',			'Experience' => '7+'		);		$faculties[7] = array(			'Id'	=> 7,			'Name' => 'Subhodeep Das',			'qualification' => 'M.Sc In Economics',			'post'	=> 'Quantitative Aptitude Faculty',			'Experience' => '6+'		);			$faculties[8] = array(			'Id'	=> 8,			'Name' => 'Pallobi Das',			'qualification' => 'B.A LLB',			'post'	=> 'English Faculty',			'Experience' => '5+'		);  		$faculties[9] = array(			'Id'	=> 9,			'Name' => 'Biswajit Dutta',			'qualification' => 'M.Sc',			'post'	=> 'Reasoning Faculty',			'Experience' => '13+'		); 		$faculties[10] = array(			'Id'	=> 10,			'Name' => 'Saroj Kumar Jha',			'qualification' => 'M.A in English',			'post'	=> 'English Faculty',			'Experience' => '12+'		); 		$faculties[11] = array(			'Id'	=> 11,			'Name' => 'Swati Singh',			'qualification' => 'M.B.A',			'post'	=> 'Genaral Awareness Faculty',			'Experience' => '3+'		);		echo json_encode($faculties);	}		public function get_full_test($product_id){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->get_full_test($product_id);				foreach($result as $row){						$arr[] = array(							'quiz_id'	=> $row['quiz_id'],				'quiz_name'	=> $row['quiz_name'],				'no_of_qs'	=> $row['no_of_qs'],				'correct_mark'	=> $row['correct_mark'],				'duration'	=> $row['duration']			);		}				echo json_encode($arr);			}		public function get_sectional_test($product_id){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->get_sectional_test($product_id);		$arr = array();		if(!empty($result)){			foreach($result as $row){								$arr[] = array(									'quiz_id'	=> $row['quiz_id'],					'quiz_name'	=> $row['quiz_name'],					'no_of_qs'	=> $row['no_of_qs'],					'correct_mark'	=> $row['correct_mark'],					'duration'	=> $row['duration']				);			}		}				echo json_encode($arr);			}		public function get_prev_yr_test($product_id){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->get_prev_yr_test($product_id);				$arr = array();		if(!empty($result)){			foreach($result as $row){								$arr[] = array(									'quiz_id'	=> $row['quiz_id'],					'quiz_name'	=> $row['quiz_name'],					'no_of_qs'	=> $row['no_of_qs'],					'correct_mark'	=> $row['correct_mark'],					'duration'	=> $row['duration']				);			}		}				echo json_encode($arr);			}		public function get_product_details($product_id){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->get_product_details($product_id);									$arr = array(							'product_id'	=> $result[0]['product_id'],				'product_name'	=> $result[0]['product_name']			);						echo json_encode($arr);	}		public function get_test_count($product_id){		header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->get_test_count($product_id);									$arr = array(							'total_count'	=> $result			);						echo json_encode($arr);	}		public function fetchbanking_VideoCourse(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_VideoCourse(1);		if(!empty($result)){			foreach($result as $row){								$vdo_arr[] = array(					'courses_name' => $row['courses_name'],					'product_id' => $row['product_id'],					'product_name' => $row['product_name'],					'product_desc' => $row['product_desc'],					'product_img' => 'http://estore.avision24x7.com/'.$row['product_img'],					'product_price' => $row['product_price'],					'product_offer_price' => $row['product_offer_price']				);			}						$data = array(					'vdo_data' => $vdo_arr,			'status' => 200,			'message' => 'data found'		);		}else{			$data = array(					'vdo_data' => [],			'status' => 203,			'message' => 'data not found'		);					}				echo json_encode($data);	}		public function fetchssc_VideoCourse(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_VideoCourse(2);		if(!empty($result)){			foreach($result as $row){								$vdo_arr[] = array(					'courses_name' => $row['courses_name'],					'product_id' => $row['product_id'],					'product_name' => $row['product_name'],					'product_desc' => $row['product_desc'],					'product_img' => 'http://estore.avision24x7.com/'.$row['product_img'],					'product_price' => $row['product_price'],					'product_offer_price' => $row['product_offer_price']				);			}						$data = array(							'vdo_data' => $vdo_arr,				'status' => 200,				'message' => 'data found'			);		}else{			$vdo_arr = array();				$data = array(							'vdo_data' => $vdo_arr,				'status' => 203,				'message' => 'data not found'			);					}				echo json_encode($data);	}		public function fetchinsurance_VideoCourse(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_VideoCourse(4);		if(!empty($result)){		foreach($result as $row){						$vdo_arr[] = array(				'courses_name' => $row['courses_name'],				'product_id' => $row['product_id'],				'product_name' => $row['product_name'],				'product_desc' => $row['product_desc'],				'product_img' => 'http://estore.avision24x7.com/'.$row['product_img'],				'product_price' => $row['product_price'],				'product_offer_price' => $row['product_offer_price']			);		}				$data = array(					'vdo_data' => $vdo_arr,			'status' => 200,			'message' => 'data found'		);		}else{						$vdo_arr = array();			$data = array(					'vdo_data' => $vdo_arr,			'status' => 203,			'message' => 'data not found'		);		}				echo json_encode($data);	}		public function fetchrailway_VideoCourse(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_VideoCourse(3);		if(!empty($result)){		foreach($result as $row){						$vdo_arr[] = array(				'courses_name' => $row['courses_name'],				'product_id' => $row['product_id'],				'product_name' => $row['product_name'],				'product_desc' => $row['product_desc'],				'product_img' => 'http://estore.avision24x7.com/'.$row['product_img'],				'product_price' => $row['product_price'],				'product_offer_price' => $row['product_offer_price']			);		}				$data = array(					'vdo_data' => $vdo_arr,			'status' => 200,			'message' => 'data found'		);		}else{						$vdo_arr = array();			$data = array(					'vdo_data' => $vdo_arr,			'status' => 203,			'message' => 'data not found'		);		}				echo json_encode($data);	}		public function fetchteaching_VideoCourse(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_VideoCourse(7);		if(!empty($result)){		foreach($result as $row){						$vdo_arr[] = array(				'courses_name' => $row['courses_name'],				'product_id' => $row['product_id'],				'product_name' => $row['product_name'],				'product_desc' => $row['product_desc'],				'product_img' => 'http://estore.avision24x7.com/'.$row['product_img'],				'product_price' => $row['product_price'],				'product_offer_price' => $row['product_offer_price']			);		}				$data = array(					'vdo_data' => $vdo_arr,			'status' => 200,			'message' => 'data found'		);		}else{						$vdo_arr = array();			$data = array(					'vdo_data' => $vdo_arr,			'status' => 203,			'message' => 'data not found'		);		}				echo json_encode($data);	}		public function fetchdefence_VideoCourse(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_VideoCourse(8);		if(!empty($result)){		foreach($result as $row){						$vdo_arr[] = array(				'courses_name' => $row['courses_name'],				'product_id' => $row['product_id'],				'product_name' => $row['product_name'],				'product_desc' => $row['product_desc'],				'product_img' => 'http://estore.avision24x7.com/'.$row['product_img'],				'product_price' => $row['product_price'],				'product_offer_price' => $row['product_offer_price']			);		}				$data = array(					'vdo_data' => $vdo_arr,			'status' => 200,			'message' => 'data found'		);		}else{						$vdo_arr = array();			$data = array(					'vdo_data' => $vdo_arr,			'status' => 203,			'message' => 'data not found'		);		}				echo json_encode($data);	}		public function fetchstateexam_VideoCourse(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetch_VideoCourse(5);		if(!empty($result)){		foreach($result as $row){						$vdo_arr[] = array(				'courses_name' => $row['courses_name'],				'product_id' => $row['product_id'],				'product_name' => $row['product_name'],				'product_desc' => $row['product_desc'],				'product_img' => 'http://estore.avision24x7.com/'.$row['product_img'],				'product_price' => $row['product_price'],				'product_offer_price' => $row['product_offer_price']			);		}				$data = array(					'vdo_data' => $vdo_arr,			'status' => 200,			'message' => 'data found'		);		}else{						$vdo_arr = array();			$data = array(					'vdo_data' => $vdo_arr,			'status' => 203,			'message' => 'data not found'		);		}				echo json_encode($data);	}		public function fetchall_VideoCourse(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->fetchall_VideoCourse();		if(!empty($result)){		foreach($result as $row){						$vdo_arr[] = array(				'courses_name' => $row['courses_name'],				'product_id' => $row['product_id'],				'product_name' => $row['product_name'],				'product_desc' => $row['product_desc'],				'product_img' => 'http://estore.avision24x7.com/'.$row['product_img'],				'product_price' => $row['product_price'],				'product_offer_price' => $row['product_offer_price']			);		}				$data = array(					'vdo_data' => $vdo_arr,			'status' => 200,			'message' => 'data found'		);		}else{						$vdo_arr = array();			$data = array(					'vdo_data' => $vdo_arr,			'status' => 203,			'message' => 'data not found'		);		}				echo json_encode($data);	}		public function live_class_fetch(){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->live_class_fetch();				if(!empty($result)){		foreach($result as $row){						$vdo_arr[] = array(				'product_id' => $row['product_id'],				'product_name' => $row['product_name'],				'product_price' => $row['product_price'],				'product_offer_price' => $row['product_offer_price'],				'live_class_title' => $row['live_class_title'],				'feature' => strip_tags($row['feature']),				'description' => strip_tags($row['description']),				'image' => 'http://estore.avision24x7.com/'.$row['image'],				'start_date' => $row['start_date'],			);		}				$data = array(					'live_cls_data' => $vdo_arr,			'status' => 200,			'message' => 'data found'		);		}else{						$vdo_arr = array();			$data = array(					'live_cls_data' => $vdo_arr,			'status' => 203,			'message' => 'data not found'		);		}				echo json_encode($data);	}	public function live_class_details($product_id){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$result = $this->api_model->live_class_details($product_id);		$result_subject = $this->api_model->live_cls_subject($product_id);		if(!empty($result_subject)){										foreach($result_subject as $row_subject){						$result_chapter = $this->api_model->live_cls_chapter($row_subject['sub_id'],$product_id);			foreach($result_chapter as $row_chapter){								$result_videos = $this->api_model->live_cls_videos($row_subject['sub_id'],$row_chapter['chapter_id'],$product_id);								foreach($result_videos as $row_videos){										$live_vdo[] = array(											'video_id' => $row_videos['video_id'],						'vdo_title' => $row_videos['vdo_title'],						'vdo_date' => $row_videos['vdo_date'],						'time' => $row_videos['time'],						'am/pm' => $row_videos['am/pm']					);				}								$live_chapter[] = array(									'chapter_id' => $row_chapter['chapter_id'],					'chapter_name' => $row_chapter['chapter_name'],					'videos'	=> 	$live_vdo				);				$live_vdo = array();			}						$live_subject[] = array(							'sub_id' => $row_subject['sub_id'],				'sub_name' => $row_subject['type_name'],				'chapter'	=> $live_chapter				);		}	}		$date=date_create(date('Y-m-d'));		$start_date = date_format($date,"jS M Y");		$cur_day = date_format($date,"d");			$product_details_arr = array(							'product_id' => $result[0]['product_id'],				'product_name' => $result[0]['product_name'],				'product_price' => $result[0]['product_price'],				'product_offer_price' => $result[0]['product_offer_price'],				'validity' => $result[0]['validity'],				'feature' => $result[0]['feature'],				'description' => $result[0]['description'],				'image' => "http://estore.avision24x7.com/".$result[0]['image'],				'start_date' => $result[0]['start_date'],				'end_date' => $result[0]['end_date'],				'cur_date_string' => $start_date,				'cur_day' => $cur_day			);			if(!empty($live_subject)){				$data = array(						'live_cls_dtls_data' => $product_details_arr,				'live_cls_vdo_dtls_data' => $live_subject,				'status' => 200,				'message' => 'data found'			);							}else{				$data = array(						'live_cls_dtls_data' => $product_details_arr,				'live_cls_vdo_dtls_data' => [],				'status' => 203,				'message' => 'data found'				);							}												echo json_encode($data);			}	public function fetch_live_class_video($id){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");				$str_id = explode("-",$id);		$product_id = $str_id[0];		$day_id = $str_id[1];				$result = $this->api_model->fetch_live_class_video($product_id,$day_id);				foreach($result as $row){			$vdo_url='';			$upload_stat=0;			if($row['vdo_url'] == ''){								$vdo_url = $row['youtube_url'];			}else if($row['youtube_url'] == ''){								$vdo_url = $row['vdo_url'];			}						if($row['youtube_url'] == '' && $row['vdo_url'] == ''){				$upload_stat= 0;			}else{				$upload_stat= 1;			}			$date=date_create($row['vdo_date']);			$vdo_date = date_format($date,"jS M Y");			$vdo_arr[] = array(							'vdo_id' => $row['video_id'],				'vdo_title' => $row['vdo_title'],				'vdo_date' => $vdo_date,				'time' => $row['time'],				'province' => $row['am/pm'],				'vdo_url' => $vdo_url,				'subject' => $row['type_name'],				'chapter' => $row['chapter_name'],				'vdo_banner' => 'https://estore.avision24x7.com/'.$row['vdo_banner'],				'upload_stat'	=> $upload_stat							);		}				$data = array(					'live_cls_vdo_list' => $vdo_arr,			'status' => 200,			'message' => 'data found'			);									echo json_encode($data);	}		public function live_class_check_buystat($product_id,$user_id){				header('Access-Control-Allow-Origin: *');        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");		header("Access-Control-Allow-Headers: authorization, Content-Type");		$result = $this->api_model->live_class_check_buystat($product_id,$user_id);				if(!empty($result)){						$data = array(					'buy_stat' => $result[0]['buy_status'],			'status' => 200,			'message' => 'data found'			);		}else{						$data = array(					'buy_stat' => 0,			'status' => 203,			'message' => 'data found'			);								}						echo json_encode($data);	}		public function get_all_subject(){    	header("Access-Control-Allow-Origin: *");    	$estore_avision = $this->load->database('estore_avision', TRUE);     	$estore_avision->select('*');        $estore_avision->from('add_question_type');		$query = $estore_avision->get()->result_array();		        return $this->output			->set_content_type('application/json')			->set_output(json_encode($query));    }    public function get_all_chapter($id){    	header("Access-Control-Allow-Origin: *");    	$estore_avision = $this->load->database('estore_avision', TRUE);        $estore_avision->select('*');        $estore_avision->from('chapter');       $estore_avision->where('parent_subject_id',$id);	   $query = $estore_avision->get()->result_array();		        return $this->output			->set_content_type('application/json')			->set_output(json_encode($query));    }	public function insert_doubt_details(){    	header("Access-Control-Allow-Origin: *");		header("Access-Control-Request-Headers: GET,POST,OPTIONS,DELETE,PUT");		header('Access-Control-Allow-Headers: Accept,Accept-Language,Content-Language,Content-Type');		//$formdata = json_decode(file_get_contents('php://input'), true);		$json = file_get_contents('php://input');		$data = json_decode($json);		//print_r($data);		//echo  $data['doubtType'].$data['subject'].$data['chapter']. $data['doubtTitile'].$data['doubtDesc'].$data['userId']; 				//echo $data->userId;		/*$data[0]->doubtType;		exit;*/		/*$arr = array(			"doubt_type" => $data->doubtType,			"subject_id"	=> $data->subject,			"chapter_id"	=> $data->chapter,			"doubt_title"	=> $data->doubtTitile,			"doubt_desc"	=> $data->doubtDesc,			"user_id"	=> $data->userId,			"time"=>date("h:i:s"),			"created_date" => date('Y-m-d'),		);*/	    		$result = $this->api_model->insert_doubt_details($data);		        echo json_encode($result);		    }		public function get_doubt_by_id(){				header("Access-Control-Allow-Origin: *");		header("Access-Control-Request-Headers: GET,POST,OPTIONS,DELETE,PUT");		header('Access-Control-Allow-Headers: Accept,Accept-Language,Content-Language,Content-Type');				$result = $this->api_model->get_doubt_by_id();		foreach($result as $row){		    $comment_count = $this->api_model->count_comment($row['doubt_id']);			$date_msg = '';			$comment_count = $this->api_model->count_comment($row['doubt_id']);			date_default_timezone_set("Asia/Kolkata");									if($row['created_date'] == date('Y-m-d')){										$date1=date_create(date($row['time']));					$date2=date_create(date('H:i:s'));					$diff=date_diff($date1,$date2);					if($diff->format("%h") != 0){												$date_msg=$diff->format("%h hours ago");					}else if($diff->format("%i") != 0){						$date_msg=$diff->format("%i minutes ago");					}else{						$date_msg = "Just Now";					}			}else{									$date1=date_create(date($row['created_date']));					$date2=date_create(date('Y-m-d'));					$diff=date_diff($date1,$date2);					$date_msg=$diff->format("%d days ago");			}			$firstChar = mb_substr($row['user_name'], 0, 1, "UTF-8");			$doubt_arr[]= array(								"doubt_title" => $row['doubt_title'],				"doubt_desc" => $row['doubt_desc'],				"user_name" => $row['user_name'],				"first_char" => $firstChar,				"date_msg"	=> $date_msg,				"doubt_id"	=> $row['doubt_id'],				"user_id"	=> $row['user_id'],				"comment_count" => $comment_count			);		}				if(!empty($doubt_arr)){						$data = array(							'dbt_arr' => $doubt_arr,				'status'=> 200,				'message' => "data found"					);		}else{			$doubt_arr =array();			$data = array(							'dbt_arr' => $doubt_arr,				'status'=> 203,				'message' => "data not found"					);					}				echo json_encode($data);			}		 public function get_doubt_all(){				header("Access-Control-Allow-Origin: *");		header("Access-Control-Request-Headers: GET,POST,OPTIONS,DELETE,PUT");		header('Access-Control-Allow-Headers: Accept,Accept-Language,Content-Language,Content-Type');		date_default_timezone_set("Asia/Kolkata");		$result = $this->api_model->get_doubt_all();					foreach($result as $row){		    $comment_count = $this->api_model->count_comment($row['doubt_id']);			$date_msg = '';						if($row['created_date'] == date('Y-m-d')){										$date1=date_create(date($row['time']));					$date2=date_create(date('H:i:s'));					$diff=date_diff($date1,$date2);					if($diff->format("%h") != 0){												$date_msg=$diff->format("%h hours ago");					}else if($diff->format("%i") != 0){						$date_msg=$diff->format("%i minutes ago");					}else{						$date_msg = "Just Now";					}			}else{									$date1=date_create(date($row['created_date']));					$date2=date_create(date('Y-m-d'));					$diff=date_diff($date1,$date2);					$date_msg=$diff->format("%d days ago");			}			$firstChar = mb_substr($row['user_name'], 0, 1, "UTF-8");			$doubt_arr[]= array(								"doubt_title" => $row['doubt_title'],				"doubt_desc" => $row['doubt_desc'],				"user_name" => $row['user_name'],				"first_char" => $firstChar,				"date_msg"	=> $date_msg,				"doubt_id"	=> $row['doubt_id'],				"user_id"	=> $row['user_id'],				"comment_count" => $comment_count							);		}				if(!empty($doubt_arr)){						$data = array(							'dbt_arr' => $doubt_arr,				'status'=> 200,				'message' => "data found"					);		}else{			$doubt_arr = array();			$data = array(							'dbt_arr' => $doubt_arr,				'status'=> 203,				'message' => "data not found"					);					}				echo json_encode($data);			}	public function get_filter_doubts($sub_id,$chap_id){				header("Access-Control-Allow-Origin: *");		header("Access-Control-Request-Headers: GET,POST,OPTIONS,DELETE,PUT");		header('Access-Control-Allow-Headers: Accept,Accept-Language,Content-Language,Content-Type');		date_default_timezone_set("Asia/Kolkata");		$result = $this->api_model->get_filter_doubts($sub_id,$chap_id);				foreach($result as $row){		    $comment_count = $this->api_model->count_comment($row['doubt_id']);			$date_msg = '';						if($row['created_date'] == date('Y-m-d')){										$date1=date_create(date($row['time']));					$date2=date_create(date('H:i:s'));					$diff=date_diff($date1,$date2);					if($diff->format("%h") != 0){												$date_msg=$diff->format("%h hours ago");					}else if($diff->format("%i") != 0){						$date_msg=$diff->format("%i minutes ago");					}else{						$date_msg = "Just Now";					}			}else{									$date1=date_create(date($row['created_date']));					$date2=date_create(date('Y-m-d'));					$diff=date_diff($date1,$date2);					$date_msg=$diff->format("%d days ago");			}			$firstChar = mb_substr($row['user_name'], 0, 1, "UTF-8");			$doubt_arr[]= array(								"doubt_title" => $row['doubt_title'],				"doubt_desc" => $row['doubt_desc'],				"user_name" => $row['user_name'],				"first_char" => $firstChar,				"date_msg"	=> $date_msg,				"doubt_id"	=> $row['doubt_id'],				"user_id"	=> $row['user_id'],				"comment_count" => $comment_count							);		}				if(!empty($doubt_arr)){						$data = array(							'dbt_arr' => $doubt_arr,				'status'=> 200,				'message' => "data found"					);		}else{			$doubt_arr = array();			$data = array(							'dbt_arr' => $doubt_arr,				'status'=> 203,				'message' => "data not found"					);					}				echo json_encode($data);	}	public function comment_doubt_fetch($id){				header("Access-Control-Allow-Origin: *");		header("Access-Control-Request-Headers: GET,POST,OPTIONS,DELETE,PUT");		header('Access-Control-Allow-Headers: Accept,Accept-Language,Content-Language,Content-Type');		date_default_timezone_set("Asia/Kolkata");		$result = $this->api_model->comment_doubt_fetch($id);		foreach($result as $row){			$date_msg = '';			$comment_count = $this->api_model->count_comment($row['doubt_id']);			if($row['created_date'] == date('Y-m-d')){										$date1=date_create(date($row['time']));					$date2=date_create(date('H:i:s'));					$diff=date_diff($date1,$date2);					if($diff->format("%h") != 0){												$date_msg=$diff->format("%h hours ago");					}else if($diff->format("%i") != 0){						$date_msg=$diff->format("%i minutes ago");					}else{						$date_msg = "Just Now";					}			}else{									$date1=date_create(date($row['created_date']));					$date2=date_create(date('Y-m-d'));					$diff=date_diff($date1,$date2);					$date_msg=$diff->format("%d days ago");			}			$firstChar = mb_substr($row['user_name'], 0, 1, "UTF-8");			$doubt_arr[]= array(								"doubt_title" => $row['doubt_title'],				"doubt_desc" => $row['doubt_desc'],				"user_name" => $row['user_name'],				"first_char" => $firstChar,				"date_msg"	=> $date_msg,				"doubt_id"	=> $row['doubt_id'],				"user_id"	=> $row['user_id'],				"comment_count" => $comment_count			);		}				if(!empty($doubt_arr)){						$data = array(							'dbt_arr' => $doubt_arr,				'status'=> 200,				'message' => "data found"					);		}else{			$doubt_arr = array();			$data = array(							'dbt_arr' => $doubt_arr,				'status'=> 203,				'message' => "data not found"					);					}				echo json_encode($data);					}	public function insert_comment_details(){				header("Access-Control-Allow-Origin: *");		header("Access-Control-Request-Headers: GET,POST,DELETE,PUT");		header('Access-Control-Allow-Headers: Accept,Accept-Language,Content-Language,Content-Type');        $estore_avision = $this->load->database('estore_avision', TRUE);		//$formdata = json_decode(file_get_contents('php://input'), true);		$json = file_get_contents('php://input');		$data = json_decode($json);	    		$data1 = array(			"comment" => $data->commentsec1,			"doubt_id"	=> $data->doubtid,			"user_id"	=> $data->user_id,			"created_date" => date('Y-m-d')					);				$estore_avision->insert("doubt_comment",$data1);		$last_id = $estore_avision->insert_id();		$result = array(					"last_id" => $last_id,			"status" => 200,			"message" => "data inserted succesfully"		);		//return $result;		//$result = $this->api_model->insert_comment_details($data);		        echo json_encode($result);        //echo json_encode($result);	}		public function liveclass_videos_subject($prod_id){		header("Access-Control-Allow-Origin: *");		header("Access-Control-Request-Headers: GET,POST,DELETE,PUT");		header('Access-Control-Allow-Headers: Accept,Accept-Language,Content-Language,Content-Type');		$result = $this->api_model->liveclass_videos_subject($prod_id);				if(!empty($result)){						foreach($result as $row){				$result_vdo_count = $this->api_model->liveclass_vdo_count($row['sub_id'],$prod_id);				$subject_arr[] = array(									'subject_id' => $row['sub_id'],					'subject_name' => $row['type_name'],					'live_vdo_count' => $result_vdo_count				);			}		}				if(!empty($subject_arr)){						$data = array(							'sub_arr' => $subject_arr,				'status'=> 200,				'message' => "data found"					);		}else{			$subject_arr =[];			$data = array(							'sub_arr' => $subject_arr,				'status'=> 203,				'message' => "data found"					);		}				echo json_encode($data);	}		public function fetchLiveclassBysubject($sub_id,$prod_id){				header("Access-Control-Allow-Origin: *");		header("Access-Control-Request-Headers: GET,POST,DELETE,PUT");		header('Access-Control-Allow-Headers: Accept,Accept-Language,Content-Language,Content-Type');				$result_chapter = $this->api_model->live_cls_chapter($sub_id,$prod_id);				foreach($result_chapter as $row_chapter){								$result_videos = $this->api_model->live_cls_videos($sub_id,$row_chapter['chapter_id'],$prod_id);								foreach($result_videos as $row_videos){										$live_vdo[] = array(											'video_id' => $row_videos['video_id'],						'vdo_title' => $row_videos['vdo_title'],						'vdo_date' => $row_videos['vdo_date'],						'time' => $row_videos['time'],						'province' => $row_videos['am/pm']					);				}				if(!empty($live_vdo)){					$live_chapter[] = array(											'chapter_id' => $row_chapter['chapter_id'],						'chapter_name' => $row_chapter['chapter_name'],						'videos'	=> 	$live_vdo					);				}else{					$live_chapter[] = array(											'chapter_id' => $row_chapter['chapter_id'],						'chapter_name' => $row_chapter['chapter_name'],						'videos'	=> 	[]					);				}				$live_vdo = array();			}						if(!empty($live_chapter)){								$data = array(							'chap_arr' => $live_chapter,				'status'=> 200,				'message' => "data found"					);			}else{								$data = array(							'chap_arr' => [],				'status'=> 203,				'message' => "data not found"					);			}								echo json_encode($data);	}		public function fetch_user_name($user_id){				header("Access-Control-Allow-Origin: *");		header("Access-Control-Request-Headers: GET,POST,DELETE,PUT");		header('Access-Control-Allow-Headers: Accept,Accept-Language,Content-Language,Content-Type');				$result = $this->api_model->fetch_user_name($user_id);				foreach($result as $row){			$firstChar = mb_substr($row['user_name'], 0, 1, "UTF-8");			$user_arr[] = array(							'user_id' => $user_id,				'user_name' => $row['user_name'],				'firstChar'	=> $firstChar						);		}				if(!empty($user_arr)){						$data = array(							'user_arr' => $user_arr,				'status' => 200,				'message' => 'data found'			);	}else{				$data = array(							'user_arr' => [],				'status' => 200,				'message' => 'data not found'			);	}		echo json_encode($data);	}	public function fetch_commentsById($doubt_id){				header("Access-Control-Allow-Origin: *");		header("Access-Control-Request-Headers: GET,POST,DELETE,PUT");		header('Access-Control-Allow-Headers: Accept,Accept-Language,Content-Language,Content-Type');				$result = $this->api_model->fetch_commentsById($doubt_id);				foreach($result as $row){			$firstChar = mb_substr($row['user_name'], 0, 1, "UTF-8");			$comment_arr[] = array(							'comment_id' => $row['comment_id'],				'coment'	=> $row['comment'],				'count_comment'	=> count($result),				'user_name'		=> $row['user_name'],				'firstChar'	=> $firstChar						);		}				if(!empty($comment_arr)){						$data = array(							'comment_arr' => $comment_arr,				'status' => 200,				'message' => 'data found'			);		}else{						$data = array(							'comment_arr' => [],				'status' => 203,				'message' => 'data not found'			);		}				echo json_encode($data);			}		public function fetch_all_ori_vdo($product_id){				header("Access-Control-Allow-Origin: *");		header("Access-Control-Request-Headers: GET,POST,DELETE,PUT");		header('Access-Control-Allow-Headers: Accept,Accept-Language,Content-Language,Content-Type');				date_default_timezone_set("Asia/Kolkata");				$result = $this->api_model->fetch_all_ori_vdo($product_id);				foreach($result as $row){						$vdo_url='';			if($row['vdo_url'] == ''){								$vdo_url = $row['youtube_url'];			}else if($row['youtube_url'] == ''){								$vdo_url = $row['vdo_url'];			}			$date=date_create($row['vdo_date']);			$vdo_date = date_format($date,"jS M Y");			$today_status =0;			if($row['vdo_date'] == date("Y-m-d")){								$today_status = 1;			}else{								$today_status = 0;			}			$vdo_arr[] = array(							'vdo_id' => $row['video_id'],				'vdo_title' => $row['vdo_title'],				'vdo_date' => $vdo_date,				'time' => $row['time'],				'province' => $row['am/pm'],				'vdo_url' => $vdo_url,				'subject' => $row['type_name'],				'chapter' => $row['chapter_name'],				'day_id'  => $row['day_id'],				'vdo_banner' => 'https://estore.avision24x7.com/'.$row['vdo_banner'],				'today_status'	=> 	$today_status						);		}				if(!empty($vdo_arr)){						$data = array(					'live_cls_vdo_ori' => $vdo_arr,			'status' => 200,			'message' => 'data found'			);		}else{			$data = array(					'live_cls_vdo_ori' => [],			'status' => 203,			'message' => 'data found'			);					}				echo json_encode($data);	}			}